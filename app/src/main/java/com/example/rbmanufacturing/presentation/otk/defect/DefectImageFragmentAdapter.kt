package com.example.rbmanufacturing.presentation.otk.defect

import android.content.Context
import android.graphics.BitmapFactory
import android.util.Base64
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import androidx.recyclerview.widget.RecyclerView
import com.example.rbmanufacturing.R
import com.example.rbmanufacturing.util.ImageUtil

class DefectImageFragmentAdapter(context: Context, val callback: (rowid: Int?)-> Unit): RecyclerView.Adapter<DefectImageFragmentAdapter.ViewHolder>()  {

    val inflater: LayoutInflater = LayoutInflater.from(context)
    var t_items = mutableListOf<String>()

    //test
    //val strBase64 = ""
    //val decodeBytes = Base64.decode(strBase64, Base64.DEFAULT)
    //val bm = BitmapFactory.decodeByteArray(decodeBytes, 0, decodeBytes.size-1)

    inner class ViewHolder(view: View): RecyclerView.ViewHolder(view) {

        val imgFoto = view.findViewById<ImageView>(R.id.imgViewDefect)

        fun bind(item: String) {

            //Log.d("MYLOG", item)

            val decodeBytes = Base64.decode(item, Base64.DEFAULT)
            val bm = BitmapFactory.decodeByteArray(decodeBytes, 0, decodeBytes.size-1)

            //imgFoto.setImageResource(R.drawable.baseline_photo_camera_24)

           imgFoto.setImageBitmap(bm)

            itemView.setOnClickListener {
                callback(adapterPosition)
            }

        }

    }

    internal fun setItems(items: MutableList<String>) {
        this.t_items = items
        this.notifyDataSetChanged()
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DefectImageFragmentAdapter.ViewHolder {
        return ViewHolder(inflater.inflate(R.layout.rowitem_foto_defect,parent,false))
    }

    override fun onBindViewHolder(holder: DefectImageFragmentAdapter.ViewHolder, position: Int) {
        val item = t_items[position]
        holder.bind(item)
    }

    override fun getItemCount(): Int {
        return t_items.size
    }



}